server:
  port: 8083

spring:
  application:
    name: central-auth-service
  cloud:
    compatibility-verifier:
      enabled: false
  datasource:
    driver-class-name: oracle.jdbc.OracleDriver
    url: jdbc:oracle:thin:@{ip}:{port}:{serviceName}
    username: username
    password: password
    hikari:
      connection-timeout: 10000
      maximum-pool-size: 30

management:
  endpoints:
    web:
      exposure:
        include: info, health, env

eureka:
  client:
    enabled: true
    register-with-eureka: true
    service-url:
      #defaultZone: http://localhost:8761/eureka  #This line is used when running as a stand-alone spring boot service.
      defaultZone: http://eureka-server:8761/eureka #This line is used when running as a docker container. Using Eureka Server container name i.e., eureka-server instead of local host

jwt:
  securityTokenBag:
    CREATE_CUSTOMER_PROFILE:
      secretKey: 3cfa76ef14937c1c0ea519f8fc057a80fcd04a7420f8e8bcd0a7567c272e007b
      expirationTime: 600000
    ACCESS_BL_SERVICE:
      secretKey: 3cfa76ef14937c1c0ea519f8fc057a80fcd04a7420f8e8bcd0a7567c272e007b
      expirationTime: 600000

#Above Secret Keys should be in HMAC hash string of 256 bits Format.
#Reference: https://medium.com/@tericcabrel/implement-jwt-authentication-in-a-spring-boot-3-application-5839e4fd8fac
#https://devglan.com/online-tools/hmac-sha256-online?ref=blog.tericcabrel.com
#Or Refer Java Techie Youtube Channel for Spring Security

springdoc:
  swagger-ui:
    enabled: true

logging:
  file:
    name: /logs/central-auth-service.log